plugins {
    id 'java'
    id 'jacoco'
    id 'jacoco-report-aggregation'
}

group 'com.safinalu'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

subprojects {
    repositories {
        mavenCentral()
    }

    apply plugin: 'java'
    apply plugin: "jacoco"

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
    }

    test {
        finalizedBy jacocoTestReport
    }

    jacocoTestReport { // generates code coverage report for the test task
        dependsOn test // tests are required to run before generating the report

        reports {
            xml.required = true
            csv.required = true
//        html will be generated by default
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it,
                        exclude: ['com/safinalu/main*/**']
                )
            }))
        }
    }
}

def publishedProjects = subprojects.findAll()

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'

    dependsOn(publishedProjects.test)

    additionalSourceDirs(files(publishedProjects.sourceSets.main.allSource.srcDirs))
    additionalClassDirs(files(publishedProjects.sourceSets.main.output))
    executionData(files(publishedProjects.jacocoTestReport.executionData))

    doFirst {
       // executionData.setFrom(files(executionData.findAll { it.exists() }))

    }


    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['com/safinalu/main*/**', 'module*/**']
            )
        }))
    }

    reports {
        html.required = true // human readable
        xml.required = true // required by coveralls
    }
}

test {
    finalizedBy jacocoRootReport
}

